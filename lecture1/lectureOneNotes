##Lecture 1: Algorithmic Thinking, Peak Finding

19:36 
If there is the condition of "greater than OR EQUAL TO", what's the point in having "if it exists"? It should always exist?
It's to broaden the definition to apply even if certain conditions are changed.

Straightforward solution is O(n) time complexity, taking ~13s for array.length = 10M
Recursive (binary search) solution is Olog2N time complexitiy, taking ~.001s for same length

If the problem was 2d (where n and m are axes), where we used a "Greedy Ascent" algorithm (follow the highest number starting from a random point), worst case would be looking at every element, which, if n = m, then we wind up with O(n^2) complexity
    |  A  |  B  |  C  |  D  |  E  |
----|-----|-----|-----|-----|-----|
  1 |  7  |  15 |  3  |  18 |  6  |
  2 |  10 |  12 |  5  |  20 |  8  |
  3 |  13 |  17 |  9  |  11 |  1  |
  4 |  4  |  16 |  2  |  19 |  7  |
  5 |  14 |  3  |  6  |  18 |  12 |


A better algorithm is to pick the middle row, and pick the peak within that row. Then compare to left and right value; pass in 
ALL of the columns on whichever side is larger, then repeat. This algorithm is *O(nlog2m)